<?php
/**
 *  ocs-webserver
 *
 *  Copyright 2016 by pling GmbH.
 *
 *    This file is part of ocs-webserver.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as
 *    published by the Free Software Foundation, either version 3 of the
 *    License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

$helperFetchCategory = new Default_View_Helper_CatTitle();
$helperFetchCatParent = new Default_View_Helper_CatParent();
$getAuthUser = new Default_View_Helper_GetAuthUser();
$helperBuildMemberUrl = new Default_View_Helper_BuildMemberUrl();
$helperBuildBaseUrl = new Default_View_Helper_BuildBaseUrl();
$helperImage = new Default_View_Helper_Image();
$auth = Zend_Auth::getInstance();
$member = $getAuthUser->getAuthUser();
$phash = null;
$ltat = null;

if ($auth->hasIdentity()) {
    $sess = new Zend_Session_Namespace('ocs_meta');
    $phash = $sess->phash;
    $ltat = $sess->openid;
}

$helperUserRole = new Backend_View_Helper_UserRole();
$userRoleName = $helperUserRole->userRole();
$isAdmin = false;
if (Default_Model_DbTable_MemberRole::ROLE_NAME_ADMIN == $userRoleName) {
    $isAdmin = true;
}

$jsonmember = null;
if($member && !empty($member->username)){
    $jsonmember=array(
        'member_id' => $member->member_id,
        'username' => $member->username,
        'avatar' => $member->avatar,
        'profile_image_url' => $member->profile_image_url,
        'isAdmin' => $isAdmin
    );
}


$serverUrl = $this->serverUrl();

$baseurl = Zend_Registry::get('config')->settings->client->default->baseurl;
//$baseurl = $helperBuildBaseUrl->buildBaserUrl();
// $baseurl = Zend_Registry::get('config')->settings->client->default->baseurl_meta;
$baseurlStore = Zend_Registry::get('config')->settings->client->default->baseurl_store;
$searchbaseurl = $this->buildSearchBaseUrl();
$sname = Zend_Registry::get('store_host');
$store_config = Zend_Registry::get('store_config');
$store_order = $store_config->order;
$store_name = $store_config->name;
$is_show_title = $store_config->is_show_title;
$last_char_store_order = substr($store_order, -1);

$url_forum = Zend_Registry::get('config')->settings->client->default->url_forum;
$url_gitlab = Zend_Registry::get('config')->settings->client->default->url_gitlab;
$url_blog = Zend_Registry::get('config')->settings->client->default->url_blog;
$config_domain = $config = Zend_Registry::get('config')->settings->domain;
$url_openid = $config_domain->openid->host;

/** @var Zend_Controller_Request_Http $request */
$request = Zend_Controller_Front::getInstance()->getRequest();
$http_scheme = $request->getScheme();

$json_menu = $this->fetchMetaheaderMenuJson();
$json_tree = $this->fetchStoresForCatTreeJson();


$filter = new Local_Filter_Url_Encrypt();
//$thisurl = $helperBuildBaseUrl->buildBaserUrl();
$thisurl = "/";
if(isset($_GET['url'])) {
    $thisurl = $_GET['url'];
}
$url_logout = "/logout?redirect=".$filter->filter($thisurl);
$url_login = "/logint?redirect=".$filter->filter($thisurl);


$cat_title = $helperFetchCategory->catTitle($this->cat_id);
$category_id = $this->cat_id;

$category_id_parent = $helperFetchCatParent->getCatParentId(array('project_category_id' =>  $category_id));
$cat_title_length = strlen($cat_title);
//check logo-width:
$logoWidth = (int)$this->template['header-logo']['width'];
$cat_title_left = (int)$logoWidth + (int)strlen($store_name)+120;
$tabs_left = (int)$this->template['header-nav-tabs']['absolute-left'];
$tabs_left += $cat_title_length*10;
//$idCat = Zend_Registry::isRegistered('store_category_list') ? Zend_Registry::get('store_category_list') : null;

//$helperUserRole = new Backend_View_Helper_UserRole();
//$userRoleName = $helperUserRole->userRole();
//$forum_url_postfix = Zend_Auth::getInstance()->hasIdentity() ? '/session/sso' : '';


$j_section = null;
if($this->cat_id>0)
{
    $sm = new Default_Model_Section();    
    $s = $sm->fetchSectionForCategory($this->cat_id);
    if($s && $s['section_id'])
    {
        $sectionStats = $sm->fetchSectionStatsLastMonth($s['section_id']);    
        $j_section = array();
        $j_section['section_id'] = $s['section_id'];
        $j_section['name'] = $s['name'];
        $j_section['amount'] = $sm->fetchProbablyPayoutLastMonth($s['section_id']);
        $j_section['amount_factor'] = $j_section['amount']*$sectionStats['factor'];    

        $goal = ceil( $j_section['amount_factor'] / 500 ) * 500;
        $j_section['amount'] = number_format($j_section['amount'], 2, '.', '');
        $j_section['amount_factor'] = number_format($j_section['amount_factor'], 2, '.', '');
        $j_section['goal'] =  ($goal ==0 ? 500: $goal);

        $info = new Default_Model_Info();
        $supporters = $info->getNewActiveSupportersForSectionUnique($s['section_id']);
        $supporterMonths = $info->getSectionSupportersActiveMonths($s['section_id']);

       

        $sp = array();
        foreach ($supporters as $s) {
            $t = array();
            $t['username'] = $s['username'];
            $t['profile_image_url'] = $helperImage->Image($s['profile_image_url'], array('width' => 100, 'height' => 100));   
            $t['sum_support'] = $s['sum_support'];
            foreach ($supporterMonths as $m) {
                     if($m['member_id'] == $s['member_id'])
                     {
                        $t['active_months'] = $m['active_months'];
                       
                        break;
                     }
                 }     
            $sp[] = $t;
        }        

        $j_section['supporters'] = $sp;
        //$j_section['supportersX'] = $supporters;
    }

}

?>


    <style>


        header a {
            color:  <?=$this->template['header-nav-tabs']['link']['color']?>;
        }

        header div.container.header {
            background-image: <?=$this->template['header']['background-image']?>;
            background-color: <?=$this->template['header']['background-color']?>;
            color: <?=$this->template['header']['color']?>;
            height: <?=$this->template['header']['height']?>;
        }

        header .logo-header {
            background-image: <?=$this->template['header-logo']['background-image']?>;
            display: block;
            height: <?=$this->template['header-logo']['height']?>;
            left: <?=$this->template['header-logo']['left']?>;
            position: absolute;
            top: <?=$this->template['header-logo']['top']?>;
            width: <?=$this->template['header-logo']['width']?>;
            z-index: 999;
            overflow: hidden;
        }

        
        
        
        #category-tree-container ul li.active > a {
            background-color: <?=$this->template['header-nav-tabs']['background-color-hover']?> !important;
            color: #ffffff !important;
        }
        
        #category-tree-container ul li a:hover {
            background-color: <?=$this->template['header-nav-tabs']['background-color-hover']?> !important;
            color: #ffffff !important;
        }
        
        #category-tree-container ul li a {
            display: block;
            width: 100%;
            float: left;
            background-color: transparent !important;
            color: <?=$this->template['header-nav-tabs']['background-color-active']?> !important;
            padding-left: 3px;
            padding-right: 40px;
            position: relative;
            -webkit-transition: all .2s ease-out;
            -moz-transition: all .2s ease-out;
            -o-transition: all .2s ease-out;
            transition: all .2s ease-out;
        }
        
        

        .absolute-left {
            left: <?=$tabs_left?>px;
        }

        .absolute-right {
            right: <?=$this->template['header-nav-tabs']['absolute-right']?>;
        }

        .header_cat_link {
              left: <?= $cat_title_left ?>px;
        }

        .nav-divider-pling{
            color:#E2E2E2;
        }
        .nav-pills > li + li {
                margin-left: 10px;
            }
            .dropdown-menu > li > a{
                font-size: 12px;
            }
        .metamenu .dropdown:hover .dropdown-menu {
            margin-left: -16px;
        }
        .metamenu .dropdown-menu li{
            width: 100%;
        }

        .metamenu ul.dropdown-menu  li span{ color:#999; }
        .metamenu ul.dropdown-menu  li.active span{ color:#eee; }


        @media (max-width:767px){

          header .logo-header {
            width: 100%;
            text-align: center;
            position: relative;
            height: 100px;
            float: left;
            top: 0;
          }

          header div.container.header {
            height: 180px;
            padding: 0;
          }

          header .container.header ul.menu-nav-tabs {
            right: 0;
          }

          header .container.header section.container#first-container {
            padding: 0;
            height: 180px;
            margin: 0;
            width: 100%;
          }

          header .container.header section.container#second-container {
            position: absolute;
            bottom: 20px;
            padding: 0;
          }

          header .container.header section.container#second-container .wrapper {
            padding: 0;
            width: 100%;
            text-align: center;
          }

          header .container.header section.container#second-container .wrapper .header_cat_link {
            position: relative;
            left: 0;
          }

          header .container.header section.container section.wrapper {
            padding: 0;
          }

          header#page_header nav#nav-top {
            margin: 0;
            width: 100%;
            float: left;
            height: 80px;
            position: relative;
          }

          header#page_header nav#nav-top  > .pull-right {
            height: 100%;
            width: 100% !important;
          }

          header#page_header nav#nav-top  > .pull-right .menu {
            position: absolute;
            bottom: 5px;
            right: 0;
            z-index: 999;
          }

          header .container.header nav #search {
            position: absolute;
            left: 0;
            bottom: 0;
            width: 50%;
            margin: 5px;
          }

          header .container.header nav #search input.content-search {
            width: 100%;
          }
        }
    </style>


<script type="text/javascript">
    var json_hasIdentity = <?php  if( $auth->hasIdentity() ) { echo '1' ;} else { echo '0';} ?>;
    var json_redirectString = <?php  if( $auth->hasIdentity() ) { echo Zend_Json::encode(null);} else {
    $helperEncryptUrl = new Default_View_Helper_EncryptUrl();
    $redirectString = '/redirect/' . $helperEncryptUrl->EncryptUrl(Zend_Controller_Front::getInstance()->getRequest()->getScheme() . '://' . Zend_Controller_Front::getInstance()->getRequest()->getHttpHost().$_SERVER["REQUEST_URI"]);
    echo Zend_Json::encode($redirectString);} ?>;
    var json_serverUri = <?php echo Zend_Json::encode($_SERVER["REQUEST_URI"]);?>;
    var json_member = <?php echo Zend_Json::encode($jsonmember); ?>;     
    var json_member_avatar = <?php if( $auth->hasIdentity() ) {                
        echo Zend_Json::encode($this->Image($member->profile_image_url,array('width' => 30, 'height' => 30)));
    } else { echo Zend_Json::encode(null);}?>;
    var json_template = <?php echo Zend_Json::encode($this->template); ?>;
    var json_serverUrl = <?php echo Zend_Json::encode($serverUrl); ?>;
    var json_baseurl = <?php echo  Zend_Json::encode($baseurl);?>;
    var json_baseurlStore = <?php echo  Zend_Json::encode($baseurlStore);?>;
  
    var json_searchbaseurl = <?php echo  Zend_Json::encode($searchbaseurl);?>;    
    var json_sname =  <?php echo  Zend_Json::encode($sname);?>;
    var json_store_order =  <?php echo  Zend_Json::encode($store_order);?>;
    var json_store_name =  <?php echo  Zend_Json::encode($store_name);?>;
    var json_is_show_title =  <?php echo  Zend_Json::encode($is_show_title);?>;
    var json_last_char_store_order = <?php echo  Zend_Json::encode($last_char_store_order);?>;
    var json_cat_title =  <?php echo  Zend_Json::encode($cat_title);?>;
    var json_cat_id =  <?php echo  Zend_Json::encode($category_id);?>;
    var json_logoWidth = <?php echo  Zend_Json::encode($logoWidth);?>;
    var json_cat_title_left = <?php echo  Zend_Json::encode($cat_title_left);?>;
    var json_tabs_left = <?php echo  Zend_Json::encode($tabs_left);?>;    
    var json_loginurl = <?php echo Zend_Json::encode($url_login); ?>;  
    var json_logouturl = <?php echo Zend_Json::encode($url_logout); ?>;
    var json_section = <?php echo  Zend_Json::encode($j_section); ?>;
    var json_store_for_tree = <?php echo $json_tree; ?>;
    var json_isShowAddProduct = <?php echo $this->showAddProduct ? '1': '0'; ?>;
    
    
    
</script>
<link href="/theme/react/assets/css/header.css" type="text/css" rel="stylesheet" />
<section id="site-header-container"></section>
<script src="/theme/react/bundle/header-bundle.js?<?= APPLICATION_VERSION ?>" type="text/javascript"></script>

<?php $this->inlineScript()->appendScript(
    '$(document).ready(function(){
        MenuHover.setup();
        Popuppanel.setup();
        LoginContainer.update();
        PlingsRedirect.setup();
    });'
);
