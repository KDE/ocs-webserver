<?php
/**
 *  ocs-webserver
 *
 *  Copyright 2016 by pling GmbH.
 *
 *    This file is part of ocs-webserver.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as
 *    published by the Free Software Foundation, either version 3 of the
 *    License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

$this->cc_attribution = $this->form->by->getValue();
$this->cc_commercial = $this->form->nc->getValue();
$this->cc_derivate_works = $this->form->nd->getValue();
$this->cc_share = $this->form->sa->getValue();

//$this->os = Zend_Registry::get('application_os');
$this->tab = 'add';
$helperImage = new Default_View_Helper_Image();

$modelCategory = new Default_Model_DbTable_ProjectCategory();
$valueCatId = $this->form->project_category_id->getValue();
//$valueCatId = 55;
$categories = $modelCategory->fetchCategoriesForForm($valueCatId);
$categoryAncestors = $modelCategory->fetchAncestorsAsId($valueCatId);
if (count($categoryAncestors) > 0) {
    $categoryPath = explode(',',$categoryAncestors['ancestors']);
}
$categoryPath[] = $valueCatId;
?>
    <style>

        .wizard > .content > .body {
            position: relative;
        }

        input[type=checkbox] {
            display: none;
        }

        /*
        - Style each label that is directly after the input
        - position: relative; will ensure that any position: absolute children will position themselves in relation to it
        */
        input[type=checkbox] + label {
            display: block;
            border-radius: 50%;
            position: relative;
            box-shadow: 0 0 1px #FFF; /* Soften the jagged edge */
            background: #2184be none repeat scroll 0 0;
            border: 3px solid #9dc8e2;
            color: white;
            height: 25px;
            transition: all 0.4s ease 0s;
            width: 25px;
        }

        /* Provide a border when hovered and when the checkbox before it is checked */
        input[type=checkbox] + label:hover,
        input[type=checkbox]:checked + label {
            border: 3px solid #9dc8e2;
            box-shadow: 0 0 1px #fff;
        }

        /*
        - Create a pseudo element :after when checked and provide a tick
        - Center the content
        */
        input[type=checkbox]:checked + label:after {
            content: '\2714'; /*content is required, though it can be empty - content: '';*/
            bottom: 2px;
            color: white;
            display: block;
            height: 1em;
            left: 3px;
            margin: auto;
            position: absolute;
            right: 0;
            top: -4px;
            width: 1em;
        }

    </style>
    <main class="user-admin-page">

        <section class="head-wrap">

            <!-- HEADER -->

            <section class="wrapper about-me-header">

                <figure>
                    <img src="<?php echo $helperImage->Image($this->member->profile_image_url,array('width' => 110, 'height' => 110, 'crop' => 2)); ?>" alt="profile-image" width="110" height="110">
                </figure>

                <div class="user-menu well">

                    <div class="pull-left">
                        <div class="intro">
                            <div class="large">Hi <span class="lightblue"><?= $this->member->username; ?></span><?= $this->translate(', welcome to your personal start page!') ?>
                            </div>
                            <div class="small lightgrey"><a href="/member/<?= $this->member->member_id; ?>/"><?= $this->translate('Click here to go to your About Me page.') ?></a>
                            </div>
                        </div>
                    </div>

                </div>

            </section>

            <!-- /HEADER -->

        </section>

        <section class="body-wrap">

            <section class="wrapper product-page">

                <!-- PAGE BODY -->

                <section class="my-products-page">

                    <!-- NAVIGATION -->

                    <?php echo $this->render('user/partials/userHeader.phtml'); ?>

                    <!-- /NAVIGATION -->

                    <!-- PAGE BODY -->

                    <section class="add-product-page">

                        <form enctype="multipart/form-data" role="application" class="wizard clearfix" action="" method="post" id="add-product-form">
                            <?= $this->form->project_id ?>
                            <h3>Basics</h3>
                            <section id="required">
                            	<div class="form-group"><p class="col-sm-10">(*) Mandatory fields.</p></div>
                            	<div id="preview_img_msg">
                            	
                            	</div>
                                <?php // $this->form->title ?>
                                <div class="form-group">
                                    <div class="col-sm-12 margin-top-15">
                                        <div class="small grey bold-font pull-left margin-right-5">*</div>
                                        <label class="form-label" for="title">Product Name (4 letters min.)</label>
                                    </div>
                                    <div class="col-sm-12">
                                        <input id="title"
                                               class="required form-control valid"
                                               type="text"
                                               name="title"
                                               <?php //pattern="^[ .\-&_A-z0-9]{1,}$" ?>
                                               <?php //  pattern="^[^\\'\^;*!\u0022\$]{1,}$" ?>
                                               value="<?= $this->form->title->getValue() ?>"
                                               maxlength="60"
                                               aria-required="true"
                                               aria-invalid="false"
                                               data-rule-minlength="4"
                                               data-rule-maxlength="60"
                                               data-msg-minlength="At least 4 chars"
                                               data-msg-maxlength="At most 60 chars">
                                        <?php if ($this->form->title->getMessages()) {
                                            $errorHtml = '';
                                            foreach ($this->form->title->getMessages() as $currentError) {
                                                $errorHtml .= '<label id="<?=$this->escape($this->form->title->getName())?>-error" class="error" for="<?=$this->escape($this->form->title->getName())?>">' . $currentError . '</label>';
                                            }
                                            ?>
                                            <?php echo $errorHtml ?>
                                        <?php } ?>
                                    </div>
                                </div>
                                
                                <?= $this->form->project_category_id ?>
                                <?= $this->form->project_subcategory_id ?>
                                <?= $this->form->project_sub_subcategory_id ?>
                                <?= $this->form->description ?>
                                <?= $this->form->version ?>


                                <div class="form-group">
                                    <div class="col-sm-12 margin-top-15">
                                        <div class="small grey bold-font pull-left margin-right-5">*</div>
                                        <label class="form-label" for="title">Upload a Product Logo OR a Product Gallery Picture</label>
                                    </div>
                                </div>
                                <?= $this->form->image_small ?>
                                <?= $this->form->image_small_upload ?>
                                <?php //$this->form->image_big ?>
                                <?php //$this->form->image_big_upload ?>
                                <?= $this->form->gallery ?>
                                <?= $this->form->embed_code ?>
                                <?= $this->form->link_1 ?>
                                <?= $this->form->github_code ?>
                                <?= $this->form->facebook_code ?>
                                <?= $this->form->twitter_code ?>
                                <?= $this->form->google_code ?>
                            </section>

                            <h3>Files</h3>
                            <section id="files">

                                <!-- ppload -->

                                <div id="modal-ppload" aria-labelledby="modal-ppload-label"
                                     data-ppload-api-uri="<?= PPLOAD_API_URI ?>"
                                     data-ppload-collection-id="<?= $this->ppload_collection_id ?>" data-product-id=""
                                     data-addpploadfile-uri="<?= $this->buildProductUrl('@@project_id@@', 'addpploadfile') ?>"
                                     data-updatepploadfile-uri="<?= $this->buildProductUrl('@@project_id@@', 'updatepploadfile') ?>"
                                     data-updatepackagetype-uri="<?= $this->buildProductUrl('@@project_id@@', 'updatepackagetype') ?>"
                                     data-deletepploadfile-uri="<?= $this->buildProductUrl('@@project_id@@', 'deletepploadfile') ?>"
                                     data-deletepploadfiles-uri="<?= $this->buildProductUrl('@@project_id@@', 'deletepploadfiles') ?>"
                                     data-finalizepploadcollection-uri="<?= $this->buildProductUrl('@@project_id@@', 'finalizepploadcollection') ?>">
                                    <div class="pling-modal" style="width: 100%;">
                                        <div class="">
                                            <div class="modal-header">
                                                <!-- <h3 id="modal-ppload-label"><?= $this->translate('Add your Files') ?></h3> -->
                                            </div>
                                            <div class="modal-body">
                                                <input type="file" style="display: none;" data-file-upload="" multiple>

                                                <p data-file-upload-msg=""><?= $this->translate('Drop file(s) here') ?>:</p>

                                                <div data-file-upload="" dropzone>
                                                    <table class="table" data-ppload-files="">
                                                        <thead>
                                                        <tr>
                                                            <th><?= $this->translate('Filename') ?></th>
                                                            <th><?= $this->translate('Version') ?></th>
                                                            <th><?= $this->translate('Description') ?></th>
                                                            <th><?= $this->translate('License') ?></th>
                                                            <th><?= $this->translate('Filetype') ?></th>
                                                            <th><?= $this->translate('Packagetype') ?></th>
                                                            <th><?= $this->translate('Date added') ?></th>
                                                            
                                                            <th style="text-align: right"><?= $this->translate('Filesize') ?></th>
                                                            <th></th>
                                                        </tr>
                                                        </thead>
                                                        <tbody></tbody>
                                                    </table>
                                                    <table class="table" data-file-upload="">
                                                        <tbody></tbody>
                                                    </table>
                                                </div>
                                                <div info-finalized="">

                                                </div>
                                                <div style="float: right; padding-top: 10px;" class="small light">
                                                	Deleted files are no longer publicly accessible but number of downloads still kept. *
                                                </div>
                                            </div>

                                            <div class="modal-footer" style="margin-top: 20px;">
                                            <span class="pull-left">
                                                <input type="checkbox" data-accept-checkbox=""> <?= $this->translate('I accept the ') ?>
                                                <a href="/content/terms"><?= $this->translate('Terms and Conditions') ?></a>
                                            </span>
                                            </div>
                                            <div class="modal-footer">
                                                <button class="btn btn-native pull-left" data-addpploadfile-btn="">
                                                    <?= $this->translate('Add File(s)') ?>
                                                </button>
                                                <button class="btn btn-danger pull-right" data-file-upload-cancel-btn="">
                                                    <?= $this->translate('Cancel Upload') ?>
                                                </button>
                                                <a role="button" id="github_picker" class="btn btn-native pull-left" data-toggle="" data-target="#generic-dialog" data-username="<?=$this->member->link_github?>" title="add an URL here">
                                                    <?= $this->translate('Add GitHub File') ?>
                                                </a>
                                            </div>
                                        </div>


                                        <?php if(isset($this->project_id)) { ?>

                                        <div class="modal-header">
							                <h3 id="modal-ppload-label"><?= $this->translate('Changelog') ?></h3>
							            </div>
							            
							            <div class="modal-body" style="font-size: small;">
							            	<div role="form" class="">
								            	<input type="hidden" data-update-id="" id="update-id" value="">
											    <div class="form-group">
											      <label for="tile">Changelog Title:</label>
											      <input type="text" id="update-title" data-update-title="" class="form-control input-sm" placeholder="Enter Changelog Title">
											    </div>
											    <div class="form-group">
											      <label for="text">Changelog Text:</label>
											      <textarea id="update-text" data-update-text="" class="form-control input-sm" rows="3" placeholder="Enter Changelog Text"></textarea>
											    </div>
											    <button type="submit" class="btn btn-native" data-add-update-btn="">Save Changelog</button>
											</div>

											<h4 style="padding-top: 15px;"> Your Entries:</h4>
							            	<article id="update-list">

							            	</article>
							            </div>

							            <?php } ?>
                                    </div>
                                </div>

                                <!-- /ppload -->

                            </section>

                        </form>

                        <!-- /PAGE BODY -->

                    </section>

                    <!-- /PAGE BODY -->

                </section>

            </section>
        </section>
    </main>

    <script>
        $(document).ready(function () {

            var formElement = $('#add-product-form');
            var validator = formElement.validate({
                ignore: ":disabled,:hidden"
            });
            formElement.steps({
                headerTag: "h3",
                bodyTag: "section",
                enableAllSteps: <?php echo ($this->mode == 'edit') ? "true" : "false"; ?>,
                enableCancelButton: true,
                showFinishButtonAlways: true,
                transitionEffect: "slideLeft",
              /* Labels */
                labels: {
                    cancel: "Cancel",
                    finish: "Save"
                },
                onStepChanging: function (event, currentIndex, newIndex) {
                    // Allways allow previous action even if the current form is not valid!
                    if (currentIndex > newIndex) {
                        return true;
                    }
                    // Needed in some cases if the user went back (clean up)
                    if (currentIndex < newIndex) {
                        // To remove error styles
                        formElement.find(".body:eq(" + newIndex + ") label.error").remove();
                        formElement.find(".body:eq(" + newIndex + ") .error").removeClass("error");
                    }

                    if (currentIndex == 0) {
                        if (ImagePreview.hasError) {
                            return false;
                        }
                        //logo OR preview pic mandatory!
                        var logoSrc = $('#product-picture-preview').attr('src');
                        var gallery = $('.product-gallery div:first-child');
                        var galleryPic = gallery.find('.image');

                        if (!logoSrc && !galleryPic.attr('style')) {
                            var msg = $('#preview_img_msg');
                            msg.text('');
                            msg.append('<label id="description-error" class="error" for="product-gallery">Please add a product logo or at least one product gallery picture!</label>');

                            return false;
                        }

                        if (formElement.valid()) {
                            if (ProductForm.mode == 'add' && (ProductForm.project_id == '' || ProductForm.project_id == undefined)) {
                                var result = ProductForm.saveSection(formElement.find('.body:eq(' + currentIndex + ')').attr('id'));
                                if (result == false) {
                                    validator.showErrors(ProductForm.errors);
                                    return result;
                                }
                                formElement.find("#modal-ppload").attr('data-product-id', ProductForm.project_id);
                            }
                            return true;
                        }
                        return false;
                    }
                    return formElement.valid();
                },

                onFinished: function (event, currentIndex) {
                    //logo OR preview pic mandatory!
                    var logoSrc = $('#product-picture-preview').attr('src');
                    var gallery = $('.product-gallery div:first-child');
                    var galleryPic = gallery.find('.image');

                    if (!logoSrc && !galleryPic.attr('style')) {
                        var msg = $('#preview_img_msg');
                        msg.text('');
                        msg.append('<label id="description-error" class="error" for="product-gallery">Please add a product logo or at least one product gallery picture!</label>');

                        return false;
                    }

                    if (currentIndex == 0) {
                        if (ImagePreview.hasError) {
                            return false;
                        }
                        if (ProductForm.mode == 'add' && (ProductForm.project_id == '' || ProductForm.project_id == undefined)) {
                            var result = ProductForm.saveSection(formElement.find('.body:eq(' + currentIndex + ')').attr('id'));
                            if (result == false) {
                                validator.showErrors(ProductForm.errors);
                                return result;
                            }
                            formElement.find("#modal-ppload").attr('data-product-id', ProductForm.project_id);
                        }
                    }


                    $('[name=project_id]').val(ProductForm.project_id);
                    formElement.submit();
                },

                onCanceled: function (event, currentIndex) {
                    window.location.href = "/member/<?php echo $this->member->member_id; ?>/products/";
                }

            });



                $('body').on("click", "#github_picker", function (event) {

                    html = '<form id="git-url-form">' +
                        '<div class="form-group">' +
                        '<input type="url" class="form-control" id="git-url" placeholder="put URL to GitHub release here" required="required" pattern="^https:\/\/(?:(?:(?:www\.)?github)?|(?:raw\.githubusercontent)?)\.com\/.+$">' +
                        '<span id="git-url-help" class="help-block small">e.g. https://github.com/mongodb/mongo/archive/r3.5.2.tar.gz</span></div>' +
                        '<button type="submit" class="btn btn-default btn-sm" id="git-url-submit">Submit</button>' +
                        '</form>';

                    var msgBox = $('#generic-dialog');
                    msgBox.modal('hide');
                    msgBox.find('.modal-header-text').empty().append('Enter a download URL:');
                    msgBox.find('.modal-body').empty().append(html);
                    setTimeout(function () {
                        msgBox.modal('show');
                    }, 900);

                });

                $('body').on('submit', '#git-url-form', function(event) {
                    if (! $('#git-url-form').validate()) {
                        return true;
                    }
                    event.preventDefault();
                    $.ajax({
                        url: '/file/gitlink/',
                        type: 'post',
                        data: {
                            project_id: ProductForm.project_id,
                            u: $('#git-url').val()
                        },
                        success: function(returned_data) {
                            if (!returned_data.file) {
                                $('#git-url').addClass('hasError').focus();
                                $('#git-url-help').html('An Error occurred. Please check your URL or try again later.');
                                return;
                            }
                            data_file = returned_data.file;
                            $modalPpload.attr('data-ppload-collection-id', data_file.collection_id);
                            $('#git-url').val('').removeClass('hasError');
                            $('#git-url-help').html('');
                            $('#generic-dialog').modal('hide');
                            getPploadFiles();
                        },
                        error: function() {
                            $('#git-url').addClass('hasError').focus();
                            $('#git-url-help').html('An Error occurred. Please check your URL or try again later.');
                        }
                    });
                });


                var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}
                $('button[rel="tooltip"]').tooltip();

                var $modalPpload = $('#modal-ppload');
                var pploadApiUri = $modalPpload.attr('data-ppload-api-uri');
                var ajaxUploads = {
                    queue: {},
                    currentUploadId: null,
                    uploading: null
                };

                function keysrt(key, asc) {
                    if(asc) {
                        return function(a,b){
                            if (a[key] > b[key]) return 1;
                            if (a[key] < b[key]) return -1;
                            return 0;
                        }
                    } else {
                        return function(a,b){
                            if (a[key] < b[key]) return 1;
                            if (a[key] > b[key]) return -1;
                            return 0;
                        }
                    }
                }


                function getUpdates(page) {
                    $modalPpload.find('#update-list').html('');

                    var productId = <?= isset($this->project_id)?$this->project_id:0 ?>;
                    $.ajax({
                        url: '/p/'+productId+'/getupdatesajax/',
                        type: 'GET',
                        data: {
                            format: 'json',
                            ignore_status_code: 1
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'success') {
                                return;
                            }
                            $.each(data.updates, function () {
                                var id = '';
                                if (this.project_update_id) {
                                    id = this.project_update_id;
                                }
                                var title = '';
                                if (this.title) {
                                    title = this.title;
                                }
                                var text = '';
                                if (this.text) {
                                    text = this.text;
                                }
                                var date = '';
                                if (this.created_at) {
                                    date = this.created_at;
                                }

                                var divEl = $('<div />');
                                divEl.attr('data-uptdate-id', id);
                                divEl.append(
                                    '<a name="anker_'+id+'"></a>'
                                    + '<h4>'+title+'</h4>'
                                    + '<div class="small light lightgrey product-update-date">'+date+ '</div>'
                                    + text + '<br/><br/>'
                                );

                                var btnEdit = $('<button type="submit" class="btn btn-native btn-sm" style="line-height: 10px;margin: 5px;">Edit</button>');
                                btnEdit.attr('data-change-update-btn',id);
                                btnEdit.attr('data-change-title',title);
                                btnEdit.attr('data-change-text',text);


                                var btnDelete = $('<button type="submit" class="btn btn-native btn-sm" style="line-height: 10px;margin: 5px;">Delete</button>');
                                btnDelete.attr('data-delete-update-btn',id);

                                divEl.append(btnEdit);
                                divEl.append(btnDelete);
                                divEl.append('<br/><br/><br/><br/>');

                                $modalPpload.find('#update-list').append(divEl);
                            });
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            return;
                        }
                    });

                }

                function getPploadFiles(page) {
                    var collectionId = $modalPpload.attr('data-ppload-collection-id');
                    var hasFinalized = false;
                    if (collectionId.charAt(0) == '!') {
                        collectionId = collectionId.slice(1);
                        hasFinalized = true;
                    }
                    if (!page) {
                        page = 1;
                        $modalPpload.find('table[data-ppload-files] tbody').empty();
                    }
                    $.ajax({
                        url: pploadApiUri + 'files/index',
                        type: 'GET',
                        data: {
                            collection_id: collectionId,
                            perpage: 100,
                            page: page,
                            format: 'json',
                            ignore_status_code: 1,
                            status: 'all'
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'success') {
                                return;
                            }
                            var deletePploadFileBtn = '';
                            if (!hasFinalized) {
                                deletePploadFileBtn = deletePploadFileBtn = '<a href="#" class="btn btn-danger btn-xs btn-file-dropzone" data-deletepploadfile-btn=""><span class="glyphicon glyphicon-trash"></span></a>';;
                            }
                            var deletePploadFileBtnPerFile = '';

                            var myArray = $.map(data.files, function(entry) {
                                return entry;
                            });
                            myArray.sort(keysrt('created_timestamp'), false);

                            $.each(myArray, function () {

                                var fileDescription = '';
                                if (this.description) {
                                    fileDescription = this.description;
                                }

                                var inputFileDescription = '<input data-ppload-file-description="" class="form-control input-sm"'
                                    + ' type="text" maxlength="140" placeholder="File description"'
                                    + ' value="' + fileDescription + '">';
                                if(this.active == '0') {
                                    inputFileDescription = '<input disabled="disabled" data-ppload-file-description="" class="form-control input-sm"'
                                        + ' type="text" maxlength="140" placeholder="File description"'
                                        + ' value="' + fileDescription + '">';
                                }

                                var versionText;
                                if(this.version==null) {versionText = '';} else{versionText = this.version;}

                                var version = '<input data-ppload-file-version="" class="form-control input-sm"'
                                    + ' type="text" maxlength="140" placeholder="File version"'
                                    + ' value="' + versionText + '">';
                                if(this.active == '0') {
                                    version = '<input disabled="disabled" data-ppload-file-version="" class="form-control input-sm"'
                                        + ' type="text" maxlength="140" placeholder="File version"'
                                        + ' value="' + versionText + '">';
                                }

                                var fileCategory = '';
                                if (this.category) {
                                    fileCategory = this.category;
                                }
                                var link = '';
                                var fileTags = '';
                                var osId = null;
                                var licensetype = null;
                                var license = '';
                                var licenseId = '';
                                var packagetypeId = '';


                                //var packageId = null;
                                //var archId = null;
                                //var deviceId = null;
                                if (this.tags) {
                                    fileTags = this.tags;
                                    $.each(fileTags.split(','), function () {
                                        if(this.indexOf("##")==-1) {
                                            var tagStr = this.split('-');
                                            if (tagStr.length == 2 && tagStr[0] == 'os') {
                                                osId = tagStr[1];
                                            } else if (tagStr.length == 2 && tagStr[0] == 'licensetype') {
                                                licenseId = tagStr[1];
                                            } else if (tagStr.length == 2 && tagStr[0] == 'packagetypeid') {
                                                packagetypeId = tagStr[1];
                                            }
                                        } else {
                                            var tagStr = this.split('##');
                                            if (tagStr.length == 2 && tagStr[0] == 'link') {
                                                link = tagStr[1];
                                            } else if (tagStr.length == 2 && tagStr[0] == 'license') {
                                                license = tagStr[1];
                                                license = Base64.decode(license);
                                            } else if (tagStr.length == 2 && tagStr[0] == 'packagetypeid') {
                                                packagetypeId = tagStr[1];
                                            }
                                        }
                                    });
                                }

                                var downloadLink = '<a href="' + pploadApiUri + 'files/download/id/' + this.id + '/' + this.name + '"  id="data-link' + this.id + '">' + this.name + '</a>';
                                if(this.active == '0') {
                                    deletePploadFileBtnPerFile = '';
                                    downloadLink = this.name;
                                    if ((typeof link != 'undefined') && (link != "")) {
                                        downloadLink = this.name + ' (External Link)';
                                    }
                                } else {
                                    deletePploadFileBtnPerFile = deletePploadFileBtn;
                                }

                                $modalPpload.find('table[data-ppload-files] tbody').append(
                                    '<tr data-ppload-file-id="' + this.id + '" data-ppload-file-category="' + fileCategory + '" data-ppload-file-tags="' + fileTags + '">'
                                    + '<td>' + downloadLink + '</td>'
                                    + '<td>' + version + '</td>'
                                    + '<td>' + inputFileDescription + '</td>'
                                    + '<td>'
                                    + '<select id="data-select-license' + this.id + '" data-license-id="" name="license" class="form-control input-sm" style="width: 200px;">'
                                    + '<option value=\"1000\"></option><option value=\"16\">AGPL</option><option value=\"3\">Artistic 2.0</option><option value=\"6\">BSD</option><option value=\"17\">CC0 1.0 Universal (Public Domain)</option><option value=\"9\">CPL 1.0</option><option value=\"10\">Creative Commons by</option><option value=\"13\">Creative Commons by-nc</option><option value=\"15\">Creative Commons by-nc-nd</option><option value=\"14\">Creative Commons by-nc-sa</option><option value=\"12\">Creative Commons by-nd</option><option value=\"11\">Creative Commons by-sa</option><option value=\"8\">GFDL</option><option value=\"1\">GPL</option><option value=\"2\">LGPL</option><option value=\"0\">Other</option><option value=\"7\">Proprietary License</option><option value=\"5\">QPL</option><option value=\"4\">X11</option>'
                                    + '</select>'
                                    + '</td>'
                                    + '<td>' + this.type + '</td>'
                                    + '<td>'
                                    + '<select id="data-select-packagetype' + this.id + '" data-packagetype-id="" name="packagetype" class="form-control input-sm" style="width: 200px;">'
                                    + '<option value=\"\"></option><option value=\"1\">AppImage</option><option value=\"6\">Snappy</option><option value=\"5\">Debian</option><option value=\"2\">Android (APK)</option><option value=\"3\">OS X compatible</option><option value=\"4\">Windows executable</option>'
                                    + '</select>'
                                    + '</td>'
                                    + '<td>' + this.created_timestamp + '</td>'
                                    + '<td style="text-align: right">' + humanFileSize(this.size) + '</td>'
                                    + '<td>' + deletePploadFileBtnPerFile + '</td>'
                                    + '</tr>'
                                );

                                $("#data-select-license" + this.id + " option[value='"+licenseId+"']").attr('selected', 'selected');
                                $("#data-select-packagetype" + this.id + " option[value='"+packagetypeId+"']").attr('selected', 'selected');

                                $licenseSelect = $modalPpload.find('#data-select-license' + this.id);

                                if(this.active == '0') {
                                    $licenseSelect.prop('disabled', 'disabled');
                                }

                                $licenseSelect.on('change', function (event) {
                                    event.preventDefault();
                                    $fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                                    $fileTags = $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags');
                                    $licenseId = $modalPpload.find('#data-select-license' + $fileId).val();

                                    newFileTags = '';

                                    if ($fileTags) {
                                        $.each($fileTags.split(','), function () {
                                            if(this.indexOf("##")==-1) {
                                                var tagStr = this.split('-');
                                                if (tagStr.length == 2 && tagStr[0] != 'licensetype') {
                                                    newFileTags += ',' + this;
                                                }
                                            } else {
                                                var tagStr = this.split('##');
                                                if (tagStr.length == 2 && tagStr[0] != 'license') {
                                                    newFileTags += ',' + this;
                                                }
                                            }
                                        });
                                    }
                                    newFileTags += ',licensetype-'+$licenseId;
                                    updatePploadFileTags($fileId, newFileTags);
                                    $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags',newFileTags);
                                });


                                $packagetypeSelect = $modalPpload.find('#data-select-packagetype' + this.id);

                                if(this.active == '0') {
                                    $packagetypeSelect.prop('disabled', 'disabled');
                                }

                                $packagetypeSelect.on('change', function (event) {
                                    event.preventDefault();
                                    $fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                                    $fileTags = $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags');
                                    $packagetypeId = $modalPpload.find('#data-select-packagetype' + $fileId).val();
                                    updatePackageType($fileId, $packagetypeId);

                                    newFileTags = '';
                                    if ($fileTags) {
                                        $.each($fileTags.split(','), function () {
                                            if(this.indexOf("##")==-1) {
                                                var tagStr = this.split('-');
                                                if (tagStr.length == 2 && tagStr[0] != 'packagetypeid') {
                                                    newFileTags += ',' + this;
                                                }
                                            } else {
                                                var tagStr = this.split('##');
                                                if (tagStr.length == 2 && tagStr[0] != 'packagetypeid') {
                                                    newFileTags += ',' + this;
                                                }
                                            }
                                        });
                                    }
                                    newFileTags += ',packagetypeid-'+$packagetypeId;
                                    updatePploadFileTags($fileId, newFileTags);
                                    $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags',newFileTags);
                                });

                                if ((typeof link != 'undefined') && (link != "")) {
                                    $("#data-link" + this.id).attr('href', decodeURIComponent(link));
                                    $("#data-link" + this.id).attr('target','_blank');
                                    $("#data-link" + this.id).html($("#data-link" + this.id).html() + " (External Link)");
                                }

                                if (hasFinalized) {
                                    $modalPpload.find('tr[data-ppload-file-id="' + this.id + '"] select[data-os-id]')
                                        .attr('disabled', 'disabled');
                                }
                            });
                            if (hasFinalized) {
                                $modalPpload.find('tr[data-ppload-file-id] select[data-os-id]').attr('disabled', 'disabled');
                            }

                            $modalPpload.find('p[data-file-upload-msg]').show();
                            $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');
                            $modalPpload.find('#github_picker').attr('disabled', 'disabled');

                            if ($modalPpload.find('input[data-accept-checkbox]').is(':checked')) {
                                $modalPpload.find('button[data-addpploadfile-btn]').removeAttr('disabled');
                                $modalPpload.find('#github_picker').removeAttr('disabled');
                            } else {
                                $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                                $modalPpload.find('#github_picker').attr('disabled', 'disabled');
                            }
                            if (data.pagination.next) {
                                getPploadFiles(data.pagination.next);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            return;
                        }
                    });
                }

                function postPploadFiles(files) {
                    if (files) {
                        $.each(files, function () {
                            var uploadId = 'file-upload-' + Math.floor(Math.random() * 1000) + '-' + new Date().getTime();
                            ajaxUploads.queue[uploadId] = this;
                            $modalPpload.find('table[data-file-upload] tbody').append(
                                '<tr data-file-upload-id="' + uploadId + '">'
                                + '<td>' + this.name + ' (' + humanFileSize(this.size) + ')</td>'
                                + '<td>'
                                + '<progress max="100" value="0" data-file-upload-progress=""></progress>'
                                + '<br>'
                                + '<span'
                                + ' data-file-upload-progress=""'
                                + ' data-file-upload-loaded="0"'
                                + ' data-file-upload-time="0"></span>'
                                + '</td>'
                                + '<td><a href="#" data-file-upload-cancel-btn="">×</a></td>'
                                + '</tr>'
                            );
                        });
                    }

                    if ($.isEmptyObject(ajaxUploads.queue) || ajaxUploads.uploading) {
                        return;
                    }

                    //var productId = $modalPpload.attr('data-product-id');
                    var uploadId = null;
                    var formData = new FormData();
                    $.each(ajaxUploads.queue, function (key, value) {
                        uploadId = key;
                        formData.append('file_upload', value);
                        return false;
                    });
                    var $uploadContainer = $modalPpload.find('tr[data-file-upload-id="' + uploadId + '"]');
                    var $uploadProgressBar = $uploadContainer.find('progress[data-file-upload-progress]');
                    var $uploadProgress = $uploadContainer.find('span[data-file-upload-progress]');
                    $uploadProgress.attr('data-file-upload-time', new Date().getTime());

                    $modalPpload.find('button[data-file-upload-cancel-btn]').removeAttr('disabled');

                    ajaxUploads.currentUploadId = uploadId;


                    var url = ($modalPpload.attr('data-addpploadfile-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        url = ($modalPpload.attr('data-addpploadfile-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    ajaxUploads.uploading = $.ajax({
                        xhr: function () {
                            var xhr = $.ajaxSettings.xhr();
                            if (xhr.upload) {
                                xhr.upload.addEventListener('progress', function (event) {
                                    var progress = parseInt(event.loaded / event.total * 10000) / 100;
                                    var previousLoaded = parseInt($uploadProgress.attr('data-file-upload-loaded'));
                                    var previousTime = parseInt($uploadProgress.attr('data-file-upload-time'));
                                    var currentTime = new Date().getTime();
                                    var rate = '--';
                                    if (previousTime < currentTime) {
                                        $uploadProgress.attr('data-file-upload-loaded', event.loaded);
                                        $uploadProgress.attr('data-file-upload-time', currentTime);
                                        rate = humanFileSize(Math.floor((event.loaded - previousLoaded) / (currentTime - previousTime) * 1000));
                                    }
                                    $uploadProgressBar.attr('value', progress);
                                    $uploadProgress.html(progress + '% | ' + rate + '/s');
                                }, false);
                            }
                            xhr.addEventListener('abort', function (event) {
                                delete ajaxUploads.queue[uploadId];
                                ajaxUploads.currentUploadId = null;
                                ajaxUploads.uploading = null;
                                $uploadContainer.remove();
                                $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');
                                postPploadFiles();
                            }, false);
                            return xhr;
                        },
                        url: url,
                        type: 'POST',
                        data: formData,
                        dataType: 'json',
                        contentType: false,
                        processData: false,
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }
                            delete ajaxUploads.queue[uploadId];
                            ajaxUploads.currentUploadId = null;
                            ajaxUploads.uploading = null;
                            $uploadContainer.remove();
                            $('a[href="#modal-ppload"][data-product-id="' + $modalPpload.attr('data-product-id') + '"]')
                                .attr('data-ppload-collection-id', data.file.collection_id);
                            $modalPpload.attr('data-ppload-collection-id', data.file.collection_id);
                            var version = '<input data-ppload-file-version="" class="form-control input-sm"'
                                + ' type="text" maxlength="140" placeholder="File version"'
                                + ' value="">';

                            var fileDescription = '';
                            if (data.file.description) {
                                fileDescription = data.file.description;
                            }
                            var fileCategory = '';
                            if (data.file.category) {
                                fileCategory = data.file.category;
                            }
                            var fileTags = '';
                            if (data.file.tags) {
                                fileTags = data.file.tags;
                            }

                            $modalPpload.find('table[data-ppload-files] tbody').append(
                                '<tr data-ppload-file-id="' + data.file.id + '" data-ppload-file-category="' + fileCategory + '" data-ppload-file-tags="' + fileTags + '">'
                                + '<td><a href="' + pploadApiUri + 'files/download/'
                                + 'id/' + data.file.id + '/' + data.file.name + '">' + data.file.name + '</a></td>'
                                + '<td>' + version + '</td>'
                                + '<td><input data-ppload-file-description="" class="form-control input-sm"'
                                + ' type="text" maxlength="140" placeholder="File description"'
                                + ' value="' + fileDescription + '"></td>'
                                + '<td>'
                                + '<select id="data-select-license' + data.file.id + '" data-license-id="" name="license" class="form-control input-sm">'
                                + '<option value=\"1000\"></option><option value=\"16\">AGPL</option><option value=\"3\">Artistic 2.0</option><option value=\"6\">BSD</option><option value=\"17\">CC0 1.0 Universal (Public Domain)</option><option value=\"9\">CPL 1.0</option><option value=\"10\">Creative Commons by</option><option value=\"13\">Creative Commons by-nc</option><option value=\"15\">Creative Commons by-nc-nd</option><option value=\"14\">Creative Commons by-nc-sa</option><option value=\"12\">Creative Commons by-nd</option><option value=\"11\">Creative Commons by-sa</option><option value=\"8\">GFDL</option><option value=\"1\">GPL</option><option value=\"2\">LGPL</option><option value=\"0\">Other</option><option value=\"7\">Proprietary License</option><option value=\"5\">QPL</option><option value=\"4\">X11</option>'
                                + '</select>'
                                + '</td>'
                                + '<td>' + data.file.type + '</td>'
                                + '<td>'
                                + '<select id="data-select-packagetype' + data.file.id + '" data-packagetype-id="" name="packagetype" class="form-control input-sm" style="width: 200px;">'
                                + '<option value=\"\"></option><option value=\"1\">AppImage</option><option value=\"6\">Snappy</option><option value=\"5\">Debian</option><option value=\"2\">Android (APK)</option><option value=\"3\">OS X compatible</option><option value=\"4\">Windows executable</option>'
                                + '</select>'
                                + '</td>'
                                + '<td>' + data.file.created_timestamp + '</td>'
                                + '<td style="text-align: right">' + humanFileSize(data.file.size) + '</td>'
                                + '<td><a href="#" class="btn btn-danger btn-xs btn-file-dropzone" data-deletepploadfile-btn=""><span class="glyphicon glyphicon-trash"></span></a></td>'
                                + '</tr>'
                            );

                            $licenseSelect = $modalPpload.find('#data-select-license' + data.file.id);
                            $licenseSelect.on('change', function (event) {
                                event.preventDefault();
                                $fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                                $fileTags = $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags');
                                $licenseId = $modalPpload.find('#data-select-license' + $fileId).val();

                                newFileTags = '';
                                if ($fileTags) {
                                    $.each($fileTags.split(','), function () {
                                        if(this.indexOf("##")==-1) {
                                            var tagStr = this.split('-');
                                            if (tagStr.length == 2 && tagStr[0] != 'licensetype') {
                                                newFileTags += ',' + this;
                                            }
                                        } else {
                                            var tagStr = this.split('##');
                                            if (tagStr.length == 2 && tagStr[0] != 'license') {
                                                newFileTags += ',' + this;
                                            }
                                        }
                                    });
                                }
                                newFileTags += ',licensetype-'+$licenseId;
                                updatePploadFileTags($fileId, newFileTags);
                                $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags',newFileTags);
                            });

                            $packagetypeSelect = $modalPpload.find('#data-select-packagetype' + data.file.id);
                            $packagetypeSelect.on('change', function (event) {
                                event.preventDefault();
                                $fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                                $packagetypeId = $modalPpload.find('#data-select-packagetype' + $fileId).val();
                                $fileTags = $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags');
                                updatePackageType($fileId, $packagetypeId);

                                newFileTags = '';
                                if ($fileTags) {
                                    $.each($fileTags.split(','), function () {
                                        if(this.indexOf("##")==-1) {
                                            var tagStr = this.split('-');
                                            if (tagStr.length == 2 && tagStr[0] != 'packagetypeid') {
                                                newFileTags += ',' + this;
                                            }
                                        } else {
                                            var tagStr = this.split('##');
                                            if (tagStr.length == 2 && tagStr[0] != 'packagetypeid') {
                                                newFileTags += ',' + this;
                                            }
                                        }
                                    });
                                }
                                newFileTags += ',packagetypeid-'+$packagetypeId;
                                updatePploadFileTags($fileId, newFileTags);
                                $(this).closest('tr[data-ppload-file-tags]').attr('data-ppload-file-tags',newFileTags);
                            });

                            $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');
                            postPploadFiles();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function updatePploadFile(fileId, fileDescription, fileCategory, fileTags) {
                    var $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {
                            file_id: fileId,
                            file_description: fileDescription,
                            file_category: fileCategory
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function updatePackageType(fileId, packagetypeId) {
                    var $url = ($modalPpload.attr('data-updatepackagetype-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-updatepackagetype-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {
                            file_id: fileId,
                            package_type_id: packagetypeId
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function updatePploadFileVersion(fileId, version) {
                    var $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {
                            file_id: fileId,
                            file_version: version
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function updatePploadFileTags(fileId, fileTags) {
                    var $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-updatepploadfile-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {
                            file_id: fileId,
                            file_tags: fileTags
                        },
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function deletePploadFile(fileId) {
                    var $url = ($modalPpload.attr('data-deletepploadfile-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-deletepploadfile-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }

                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {file_id: fileId},
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                alert("Error: " + data.error_text);
                                return;
                            }
                            $modalPpload.find('table[data-ppload-files] tbody').html('');
                            $modalPpload.find('table[data-file-upload] tbody').html('');
                            getPploadFiles();
                            /**
                             $modalPpload.find('tr[data-ppload-file-id="' + fileId + '"]').remove();
                             if ($modalPpload.find('tr[data-ppload-file-id]').size() === 0) {
                                                        $modalPpload.find('table[data-ppload-files] tbody').html('');
                                                        $modalPpload.find('table[data-file-upload] tbody').html('');
                                                        $modalPpload.find('p[data-file-upload-msg]').show();
                                                        $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');

                                                        if ($modalPpload.find('input[data-accept-checkbox]').is('checked')) {
                                                            $modalPpload.find('button[data-addpploadfile-btn]').removeAttr('disabled');
                                                        } else {
                                                            $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                                                        }
                                                    }**/
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function deletePploadFiles() {
                    var $url = ($modalPpload.attr('data-deletepploadfiles-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-deletepploadfiles-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }
                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {},
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }
                            $modalPpload.find('table[data-ppload-files] tbody').html('');
                            $modalPpload.find('table[data-file-upload] tbody').html('');
                            $modalPpload.find('p[data-file-upload-msg]').show();

                            $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');

                            $modalPpload.find('div[info-finalized]').html('');
                            $modalPpload.find('input[data-accept-checkbox]').removeAttr('disabled');
                            $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                            $modalPpload.find('#github_picker').attr('disabled', 'disabled');
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            alert("Error: " + textStatus + ", " + errorThrown);
                            return;
                        }
                    });
                }

                function finalizePploadCollection() {
                    var $url = ($modalPpload.attr('data-finalizepploadcollection-uri')).replace(/@@project_id@@/i, ProductForm.project_id);
                    if (typeof ProductForm.project_id == 'undefined' || ProductForm.project_id == '' || ProductForm.project_id == '0') {
                        $url = ($modalPpload.attr('data-finalizepploadcollection-uri')).replace(/@@project_id@@/i, <?= (isset($this->project_id))?$this->project_id:0  ?>);
                    }
                    $.ajax({
                        url: $url,
                        type: 'POST',
                        data: {},
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'ok') {
                                return;
                            }
                            $modalPpload.find('tr[data-ppload-file-id] a[data-deletepploadfile-btn]').remove();
                            $('a[href="#modal-ppload"][data-product-id="' + $modalPpload.attr('data-product-id') + '"]')
                                .attr('data-ppload-collection-id', '!' + $modalPpload.attr('data-ppload-collection-id'));
                            $modalPpload.attr('data-ppload-collection-id', '!' + $modalPpload.attr('data-ppload-collection-id'));
                            $modalPpload.find('p[data-file-upload-msg]').hide();
                            $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                            $modalPpload.find('#github_picker').attr('disabled', 'disabled');
                            $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');

                            //$modalPpload.find('div[info-finalized]').append('<?= $this->translate('<br/><b>Your files are finalized (and via torrent downloadable). If you want to add new files, click on "Delete All" and upload all of your files again.</b>')?>');
                            $modalPpload.find('input[data-accept-checkbox]').attr('disabled', 'disabled');

                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            return;
                        }
                    });
                }

                function humanFileSize(bytes) {
                    var size = '';
                    size = (bytes / 1048576).toFixed(2) + ' MB';
                    /*
                     if (bytes >= 1073741824) {
                     size = (bytes / 1073741824).toFixed(2) + 'GB';
                     }
                     else if (bytes >= 1048576) {
                     size = (bytes / 1048576).toFixed(2) + 'MB';
                     }
                     else if (bytes >= 1024) {
                     size = (bytes / 1024).toFixed(2) + 'KB';
                     }
                     else {
                     size = bytes + 'bytes';
                     }*/
                    return size;
                }


                //event.preventDefault();
                $modalPpload.attr('data-ppload-collection-id', $(this).attr('data-ppload-collection-id'));
                $modalPpload.attr('data-product-id', $(this).attr('data-product-id'));
                $modalPpload.attr('data-addpploadfile-uri', $(this).attr('data-addpploadfile-uri'));
                $modalPpload.attr('data-updatepploadfile-uri', $(this).attr('data-updatepploadfile-uri'));
                $modalPpload.attr('data-deletepploadfile-uri', $(this).attr('data-deletepploadfile-uri'));
                $modalPpload.find('div[data-file-upload]').css({
                    'min-height': '200px',
                    'max-height': '400px',
                    'border-width': '5px',
                    'border-style': 'dashed',
                    'border-color': '#cccccc',
                    'overflow': 'auto'
                });
                $modalPpload.find('table[data-ppload-files] tbody').html('');
                $modalPpload.find('table[data-file-upload] tbody').html('');
                $modalPpload.find('p[data-file-upload-msg]').show();

                $modalPpload.find('div[info-finalized]').html('');
                $modalPpload.find('input[data-accept-checkbox]').removeAttr('disabled');


                $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                $modalPpload.find('#github_picker').attr('disabled', 'disabled');
                $modalPpload.find('button[data-file-upload-cancel-btn]').attr('disabled', 'disabled');

                if ($modalPpload.attr('data-ppload-collection-id')) {
                    getPploadFiles();
                }

                if(<?= (isset($this->project_id))?$this->project_id:0  ?> != 0) {
                    getUpdates();
                }

                $modalPpload.on('dragover', 'div[data-file-upload]', function (event) {
                    event.preventDefault();
                });

                $modalPpload.on('dragenter', 'div[data-file-upload]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        $(this).css('border-color', '#00ccff');
                    }
                });

                $modalPpload.on('dragleave', 'div[data-file-upload]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        $(this).css('border-color', '#cccccc');
                    }
                });

                $modalPpload.on('drop', 'div[data-file-upload]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        postPploadFiles(event.originalEvent.dataTransfer.files);
                        $(this).css('border-color', '#cccccc');
                    }
                });

                $modalPpload.on('change', 'input[data-file-upload]', function (event) {
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        postPploadFiles(this.files);
                    }
                });

                $modalPpload.on('click', 'button[data-addpploadfile-btn]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        $modalPpload.find('input[data-file-upload]').click();
                    }
                });

                $modalPpload.on('click', 'input[data-accept-checkbox]', function (event) {

                    if ($modalPpload.find('input[data-accept-checkbox]').is(':checked')) {
                        //event.preventDefault();
                        $modalPpload.find('button[data-addpploadfile-btn]').removeAttr('disabled');
                        $modalPpload.find('#github_picker').removeAttr('disabled');
                    } else {
                        //event.preventDefault();
                        $modalPpload.find('button[data-addpploadfile-btn]').attr('disabled', 'disabled');
                        $modalPpload.find('#github_picker').attr('disabled', 'disabled');
                    }
                });

                $modalPpload.on('click', 'tr[data-ppload-file-id] a[data-deletepploadfile-btn]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        deletePploadFile($(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id'));
                    }
                });

                $modalPpload.on('click', 'button[data-file-upload-cancel-btn]', function (event) {
                    event.preventDefault();
                    ajaxUploads.uploading.abort();
                    ajaxUploads.queue = {};
                    $modalPpload.find('table[data-file-upload] tbody').html('');
                });

                $modalPpload.on('click', 'tr[data-file-upload-id] a[data-file-upload-cancel-btn]', function (event) {
                    event.preventDefault();
                    var uploadId = $(this).closest('tr[data-file-upload-id]').attr('data-file-upload-id');
                    if (uploadId == ajaxUploads.currentUploadId) {
                        ajaxUploads.uploading.abort();
                    }
                    else {
                        delete ajaxUploads.queue[uploadId];
                        $modalPpload.find('tr[data-file-upload-id="' + uploadId + '"]').remove();
                    }
                });

                $modalPpload.on('change', 'input[data-ppload-file-description]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        var fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                        var fileDescription = $(this).closest('input[data-ppload-file-description]').val();
                        var fileCategory = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-category');
                        var fileTags = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-tags');

                        $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-tags', fileTags);
                        updatePploadFile(fileId, fileDescription, fileCategory, fileTags);
                    }
                });

                $modalPpload.on('change', 'input[data-ppload-file-version]', function (event) {
                    event.preventDefault();
                    if (!$modalPpload.attr('data-ppload-collection-id')
                        || $modalPpload.attr('data-ppload-collection-id').charAt(0) != '!'
                    ) {
                        var fileId = $(this).closest('tr[data-ppload-file-id]').attr('data-ppload-file-id');
                        var fileVersion = $(this).closest('input[data-ppload-file-version]').val();
                        updatePploadFileVersion(fileId, fileVersion);
                    }
                });


                $modalPpload.on('click', 'button[data-add-update-btn]', function (event) {
                    var update_id = $modalPpload.find('#update-id').val();
                    var title = $modalPpload.find('#update-title').val();
                    var text = $modalPpload.find('#update-text').val();
                    var productId = <?= isset($this->project_id)?$this->project_id:0 ?>;
                    event.preventDefault();

                    $.ajax({
                        url: '/p/'+productId+'/saveupdateajax',
                        type: 'POST',
                        data: {title: title, text: text, update_id: update_id},
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'success') {
                                return;
                            }
                            $modalPpload.find('#update-title').val('');
                            $modalPpload.find('#update-text').val('');
                            $modalPpload.find('#update-id').val('');
                            getUpdates();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            return;
                        }
                    });

                });

                $modalPpload.on('click', 'button[data-delete-update-btn]', function (event) {
                    var updateId = $(this).attr('data-delete-update-btn');
                    var productId = <?= isset($this->project_id)?$this->project_id:0 ?>;
                    event.preventDefault();

                    $.ajax({
                        url: '/p/'+productId+'/deleteupdateajax',
                        type: 'POST',
                        data: {update_id: updateId},
                        dataType: 'json',
                        success: function (data, textStatus, jqXHR) {
                            if (data.status != 'success') {
                                alert('Update could not be deleted!');
                                return;
                            }
                            getUpdates();
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            return;
                        }
                    });

                });

                $modalPpload.on('click', 'button[data-change-update-btn]', function (event) {
                    var updateId = $(this).attr('data-change-update-btn');
                    var title = $(this).attr('data-change-title');
                    var text = $(this).attr('data-change-text');

                    $modalPpload.find('#update-title').val(title);
                    $modalPpload.find('#update-text').val(text);
                    $modalPpload.find('#update-id').val(updateId);

                    $modalPpload.find('#update-title').focus();

                    event.preventDefault();
                });



        });
    </script>
  <script>
      $.fn.sortSelect = function() {
          var op = this.children("option");
          op.sort(function(a, b) {
              return a.text > b.text ? 1 : -1;
          })
          return this.empty().append(op);
      }

      $.fn.sort_select_box = function(){
          var my_options = $("option", $(this));
          my_options.sort(function(a,b) {
              if (a.text > b.text) return 1;
              else if (a.text < b.text) return -1;
              else return 0
          });
          $(this).empty().append(my_options);
      }

      ProductForm = {

          mode: "<?=$this->mode?>",
          project_id: <?php echo ($this->mode == 'edit') ? $this->project_id : '$(\'#project_id\').val()'?>,
          errors: "",
          cc_license_isStored: <?=$this->form->cc_license->getValue() == true ? 'true' : 'false'?>,
          cc_license_data: {
              by:<?=$this->cc_attribution == true ? 'true' : 'false'?>,
              nc:<?=$this->cc_commercial == true ? 'true' : 'false'?>,
              nd:<?=$this->cc_derivate_works == true ? 'true' : 'false'?>,
              sa:<?=$this->cc_share == true ? 'true' : 'false'?>
          },
          cat_id_data: <?=json_encode($categories)?>,
          cat_id_path: <?=json_encode($categoryPath)?>,


          setup: function () {
              this.setupCategorySelect();
              this.setupCategoryAjax();
//              this.setupCcLicenseActions();
//              this.setLicenseCheckbox();
//              this.setCssLicenseSummary();
//              this.setCCLicenseVisibility();
          },

          setupCategorySelect: function() {
              var level = 0;
              for (var form_elem_name in this.cat_id_data) {
                  var nextElementName = form_elem_name.substring(0, form_elem_name.length - 1) + (level + 1);
                  var new_html_element = '<select name="' + form_elem_name + '" id="' + form_elem_name + '" class="required form-control product_select_cat" data-target="'+nextElementName+'" data-level="'+level+'">';
                  new_html_element += '<option value=""> </option>';
                  for (var form_select_option in this.cat_id_data[form_elem_name]) {
                      var attr_selected = '';
                      if (form_select_option == this.cat_id_path[level]) {
                          attr_selected = ' selected="selected"'
                      }
                      new_html_element += '<option value="' + form_select_option + '" ' + attr_selected + '>' + this.cat_id_data[form_elem_name][form_select_option] + '</option>';
                  }
                  new_html_element += '</select>';
                  $('#wrapper_cat_id').append(new_html_element);
                  this.sortOptionByValue(form_elem_name);
                  level++;
              }
          },

          sortOptionByValue: function(element_id) {
              var my_options = $("#"+element_id + " option");
              var selected = $("#"+element_id).val();

              my_options.sort(function(a,b) {
                  if (a.text > b.text) return 1;
                  else if (a.text < b.text) return -1;
                  else return 0;
              })
              $("#"+element_id).empty().append( my_options );
              $("#"+element_id).val(selected);
          },


          setupCategoryAjax: function () {
              $('body').on('change', 'div#wrapper_cat_id select.product_select_cat', function () {

                  var cat_id = $(this).val();
                  var name_new_elem = $(this).data('target');
                  var level_elem = $(this).data('level') + 1;
                  var level_new_elem = level_elem + 1;
                  var name_new_target = name_new_elem.substring(0,name_new_elem.length - 1) + level_new_elem;

                  if (!cat_id) {
                      $('#wrapper_form_cat input:hidden:first').val($('#wrapper_cat_id').find("[data-level]:lt(" + (level_elem - 1) + ")").val());
                      $('#wrapper_cat_id').find("[data-level]:gt(" + (level_elem - 1) + ")").remove();
                      return;
                  }
                  $('#wrapper_form_cat input:hidden:first').val(cat_id);

                  jQuery.ajax({
                      data: {'cat_id': cat_id},
                      url: '/productcategory/fetchchildren/',
                      type: 'post',
                      success: function (results) {
                          $('#wrapper_cat_id').find("[data-level]:gt(" + (level_elem - 1) + ")").remove();
                          if (!$.isEmptyObject(results)) {
                              var new_html_element = '<select name="' + name_new_elem + '" id="' + name_new_elem + '" class="required form-control product_select_cat" data-target="'+name_new_target+'" data-level="'+level_elem+'">';
                              new_html_element += '<option value=""> </option>';
                              for (var i in results) {
                                  new_html_element += '<option value="' + results[i].project_category_id + '">' + results[i].title + '</option>';
                              }
                              new_html_element += '</select>';

                              $('#wrapper_cat_id').append(new_html_element);
                        }
                    }
                  });
              });
          },

          setupCcLicenseActions: function () {
              $('body').on('change', '#license-text input[type="checkbox"]', function () {
                  if ($(this).attr('data-name') == 'sa') {
                      $('#cc_non_derivative_works').prop('checked', false);
                      ProductForm.cc_license_data.nd = false;
                  }
                  if ($(this).attr('data-name') == 'nd') {
                      $('#cc_share_alike').prop('checked', false);
                      ProductForm.cc_license_data.sa = false;
                  }
                  ProductForm.updateLicenseData($(this).attr('data-name'), $(this).is(':checked'));
              }).on('click', '#cc_attribution', function (event) {
                  event.stopPropagation();
                  return false;
              });
          },

          saveSection: function (sectionId) {
              var pid = <?php echo ($this->mode == 'edit') ? $this->project_id : '$(\'#project_id\').val()'?>;
              if (pid != '') {
                  return;
              }

              var url = '/p/save/';
              var data = $('#' + sectionId + ' :input').serialize();
              var result = false;

              jQuery.ajax({
                  data: data,
                  url: url,
                  type: 'post',
                  async: false
              }).done(function (data, textStatus, jqXHR) {
                  if (data.project_id == undefined) {
                      ProductForm.project_id = '';
                  } else {
                      ProductForm.project_id = data.project_id;
                  }
                  if (data.status == 'error') {
                      ProductForm.errors = data.messages;
                      result = false;
                  } else {
                      result = true;
                  }

              }).fail(function (jqXHR, textStatus, errorThrown) {

              }).always(function (data, textStatus, errorThrown) {

              });

              return result;
          },

          showErrors: function () {
              $.each(this.errors, function (index, value) {
                  $('[name=' + index + ']').append('<label id="title-error" class="error" for="title">' + value + '</label>');
              });
          },

          setLicenseCheckbox: function () {
              $('#cc_license').prop('checked', this.cc_license_isStored);
              $('#cc_attribution').prop('checked', this.cc_license_data.by);
              $('#cc_commercial').prop('checked', this.cc_license_data.nc);
              $('#cc_non_derivative_works').prop('checked', this.cc_license_data.nd);
              $('#cc_share_alike').prop('checked', this.cc_license_data.sa);
          },

          setCssLicenseSummary: function () {
              var css_license = this.buildCssLicense(this.cc_license_data);
              $('.cc-license-icon').attr('class', css_license);
          },

          buildCssLicense: function (obj) {
              var result = "cc-license-icon cc-license-icon";
              for (var i in obj) {
                  if (obj.hasOwnProperty(i) && obj[i]) {
                      result += "-" + i;
                  }
              }
              return result;
          },

          updateLicenseData: function (attr, value) {
              this.cc_license_data[attr] = value;
              this.setCssLicenseSummary();
          },

          setCCLicenseVisibility: function () {
              if (this.cc_license_isStored == false) {
                  $('#cc_summary').collapse();
                  $('#license-text').collapse();
              }
          }

      };
    </script>
<?php $this->inlineScript()->appendScript(
    '    $(document).ready(function(){
            ImagePreview.setup();
            ProductForm.setup();
            ProductGallery.setup();
        });
    ');
