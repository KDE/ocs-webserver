<?php 
/**
 *  ocs-webserver
 *
 *  Copyright 2016 by pling GmbH.
 *
 *    This file is part of ocs-webserver.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as
 *    published by the Free Software Foundation, either version 3 of the
 *    License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/
?>
<?= $this->partial('yui.phtml'); ?>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script type="text/javascript">
/*
    $(document).ready(function () {

        $("body").addClass("yui-skin-sam");

        YAHOO.widget.Chart.SWFURL = "/tools/yui_2.9.0/build/charts/assets/charts.swf";

        var dashboardTabView = new YAHOO.widget.TabView();

        

        dashboardTabView.addTab(new YAHOO.widget.Tab({
            label: 'New Members',
            content: '<div class="chart" id="newmemberchart"></div>',   
             active: true         
        }));

        dashboardTabView.addTab(new YAHOO.widget.Tab({
            label: 'New Products',
            content: '<div class="chart" id="newprojects"></div>'
        }));

        dashboardTabView.appendTo('tabContainer');


        // source for memberChart
        var newmemberDataSource = new YAHOO.util.XHRDataSource("/backend/index/getnewmemberstats");
        newmemberDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
        newmemberDataSource.responseSchema = {
            fields: ['memberdate', 'daycount'],
            resultsList: 'results'
            // metaFields: {totalRecords: "totalRecords" }
        };

        var memberSeriesDef = [
            {displayName: "Members", yField: "daycount"}
        ];

        YAHOO.pling.getMemberDataTipText = function (item, index, series) {
            var toolTipText = item[series.yField] + " new Members at";
            toolTipText += "\n" + item.memberdate;
            return toolTipText;
        }

        var amountYAxis = new YAHOO.widget.NumericAxis();
        amountYAxis.majorUnit = 2;

        var newMemberChart = new YAHOO.widget.LineChart('newmemberchart', newmemberDataSource, {
            xField: 'memberdate',
            series: memberSeriesDef,
            dataTipFunction: YAHOO.pling.getMemberDataTipText,
            yAxis: amountYAxis,
            wmode: 'opaque'
        });

        //***************************************************************************************************

        // source for projectCharts
        var newprojectDataSource = new YAHOO.util.XHRDataSource("/backend/index/getnewprojectstats");
        newprojectDataSource.responseType = YAHOO.util.DataSource.TYPE_JSON;
        newprojectDataSource.responseSchema = {
            fields: ['projectdate', 'daycount'],
            resultsList: 'results'
            // metaFields: {totalRecords: "totalRecords" }
        };

        var projectSeriesDef = [
            {displayName: "Products", yField: "daycount"}
        ];

        YAHOO.pling.getProjectDataTipText = function (item, index, series) {
            var toolTipText = item[series.yField] + " new Products at";
            toolTipText += "\n" + item.projectdate;
            return toolTipText;
        }


        var newProjectChart = new YAHOO.widget.LineChart('newprojects', newprojectDataSource, {
            xField: 'projectdate',
            series: projectSeriesDef,
            dataTipFunction: YAHOO.pling.getProjectDataTipText,
            yAxis: amountYAxis,
            wmode: 'opaque'
        });


    });*/
</script>
<div id="tabContainer">

</div>


<div class="pling-nav-tabs">
<ul class="nav nav-tabs ">
 <li class="active"><a href="#d3-line" data-toggle="tab">New Members & Projects Line</a></li>
 <li ><a href="#d3-bar" data-toggle="tab">New Members & Projects Chart</a></li> 
</ul>
<div class="tab-content row"  >
  
   <div id="d3-bar" class="tab-pane ">
    comming soon...
  </div>

   <div id="d3-line" class="tab-pane active ">
    <div style="width: 100%; padding: 20px">
        
        <div id='d3linelableinline'></div>
        
    </div>
  </div>

</div>
</div> <!--end of tab-->



<script>

var parseTime = d3.timeParse("%Y-%m-%d");
var svgLine = d3.select("#d3linelableinline")
    .append("svg")
    .attr("width", 1200)
    .attr("height", 600);

var marginLine = {top: 30, right: 50, bottom: 30, left: 30},
    widthLine = +svgLine.attr("width") - marginLine.left - marginLine.right,
    heightLine = +svgLine.attr("height") - marginLine.top - marginLine.bottom,
    labelPadding = 3;

var g = svgLine.append("g")
    .attr("transform", "translate(" + marginLine.left + "," + marginLine.top + ")");


    d3.json("/backend/index/getnewmembersprojects", function(error, data) {        
      if (error) throw error;
      data = data.results;
      
      // format the data
      data.forEach(function(d) {
          d.date = parseTime(d.date);
          d.members = +d.members;
          d.projects = +d.projects;
      });

      data.columns=['date','members','projects'];      
      var series = data.columns.slice(1).map(function(key) {
        return data.map(function(d) {
          return {
            key: key,
            date: d.date,
            value: d[key]
          };
        });
      });


      var xLine = d3.scaleTime()
          .domain([data[0].date, data[data.length - 1].date])
          .range([0, widthLine]);

      var yLine = d3.scaleLinear()
          .domain([0, d3.max(series, function(s) { return d3.max(s, function(d) { return d.value; }); })])
          .range([heightLine, 0]);

      var zLine = d3.scaleOrdinal(d3.schemeCategory10);

      g.append("g")
          .attr("class", "axis axis--x")
          .attr("transform", "translate(0," + heightLine + ")")
          .call(d3.axisBottom(xLine));

      var serie = g.selectAll(".serie")
          .data(series)
        .enter().append("g")
          .attr("class", "serie");

      serie.append("path")
          .attr("class", "line")
          .style("stroke", function(d) { return zLine(d[0].key); })
          .attr("d", d3.line()
              .x(function(d) { return xLine(d.date); })
              .y(function(d) { return yLine(d.value); }));

      var label = serie.selectAll(".label")
          .data(function(d) { return d; })
        .enter().append("g")
          .attr("class", "label")
          .attr("transform", function(d, i) { return "translate(" + xLine(d.date) + "," + yLine(d.value) + ")"; });
          
          label.append("text")
               .attr("dy", ".35em")
               .text(function(d) { return d.value; })
             .filter(function(d, i) { return i === data.length - 1; })
            

     const newText = label.selectAll('text');
     const bbox = newText.node().getBBox();

     label.append('rect', 'text')
         .datum(() => bbox)
         .attr('x', d => (d.x - labelPadding))
         .attr('y', d => (d.y - labelPadding))
         .attr('width', d => (d.width + (2 * labelPadding)))
         .attr('height', d => (d.height + (2 * labelPadding)));

         label.append("text")
              .attr("dy", ".35em")
              .text(function(d) { return d.value; })
            .filter(function(d, i) { return i === data.length - 1; })
            .append("tspan")
              .attr("class", "label-key")
              .text(function(d) { return " " + d.key; });

    });


/*
d3.tsv("/data/data.tsv", function(d) {
  d.date = parseTime(d.date);
  for (var k in d) if (k !== "date") d[k] = +d[k];
  return d;
}, function(error, data) {
  if (error) throw error;

  var series = data.columns.slice(1).map(function(key) {
    return data.map(function(d) {
      return {
        key: key,
        date: d.date,
        value: d[key]
      };
    });
  });

  var xLine = d3.scaleTime()
      .domain([data[0].date, data[data.length - 1].date])
      .range([0, widthLine]);

  var yLine = d3.scaleLinear()
      .domain([0, d3.max(series, function(s) { return d3.max(s, function(d) { return d.value; }); })])
      .range([heightLine, 0]);

  var zLine = d3.scaleOrdinal(d3.schemeCategory10);

  g.append("g")
      .attr("class", "axis axis--x")
      .attr("transform", "translate(0," + heightLine + ")")
      .call(d3.axisBottom(xLine));

  var serie = g.selectAll(".serie")
      .data(series)
    .enter().append("g")
      .attr("class", "serie");

  serie.append("path")
      .attr("class", "line")
      .style("stroke", function(d) { return zLine(d[0].key); })
      .attr("d", d3.line()
          .x(function(d) { return xLine(d.date); })
          .y(function(d) { return yLine(d.value); }));

  var label = serie.selectAll(".label")
      .data(function(d) { return d; })
    .enter().append("g")
      .attr("class", "label")
      .attr("transform", function(d, i) { return "translate(" + xLine(d.date) + "," + yLine(d.value) + ")"; });
      
      label.append("text")
           .attr("dy", ".35em")
           .text(function(d) { return d.value; })
         .filter(function(d, i) { return i === data.length - 1; })
        

 const newText = label.selectAll('text');
 const bbox = newText.node().getBBox();

 label.append('rect', 'text')
     .datum(() => bbox)
     .attr('x', d => (d.x - labelPadding))
     .attr('y', d => (d.y - labelPadding))
     .attr('width', d => (d.width + (2 * labelPadding)))
     .attr('height', d => (d.height + (2 * labelPadding)));

     label.append("text")
          .attr("dy", ".35em")
          .text(function(d) { return d.value; })
        .filter(function(d, i) { return i === data.length - 1; })
        .append("tspan")
          .attr("class", "label-key")
          .text(function(d) { return " " + d.key; });

});
*/

</script>