<?php
/**
 *  ocs-webserver
 *
 *  Copyright 2016 by pling GmbH.
 *
 *    This file is part of ocs-webserver.
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as
 *    published by the Free Software Foundation, either version 3 of the
 *    License, or (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/

class Local_Verification_WebsiteOwnerTest extends PHPUnit_Framework_TestCase
{

    protected function setUp()
    {
        require_once APPLICATION_LIB . '/Local/Application.php';

        // Create application, bootstrap, and run
        $this->bootstrap = new Local_Application(
            APPLICATION_ENV,
            Zend_Registry::get('configuration'),
            Zend_Registry::get('cache')
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }


    public function testParseDomain()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://vizzzion.org/blog/2015/09/wall-drawing/');
        $this->assertEquals('vizzzion.org', $result);
    }

    public function testParseDomainWithHttps()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('https://vizzzion.org/blog/2015/09/wall-drawing/');
        $this->assertEquals('vizzzion.org', $result);
    }

    public function testParseDomainWithWWW()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://www.vizzzion.org/blog/2015/09/wall-drawing/');
        $this->assertEquals('www.vizzzion.org', $result);
    }

    public function testParseDomainWithWWWHttps()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('https://www.vizzzion.org/blog/2015/09/wall-drawing/');
        $this->assertEquals('www.vizzzion.org', $result);
    }

    public function testParseDomainWithoutPath()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://vizzzion.org');
        $this->assertEquals('vizzzion.org', $result);
    }

    public function testParseDomainWithoutPathWithWWW()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://www.vizzzion.org');
        $this->assertEquals('www.vizzzion.org', $result);
    }

    public function testParseDomainWithputPathWithHttps()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('https://vizzzion.org');
        $this->assertEquals('vizzzion.org', $result);
    }

    public function testParseDomainWithoutPathWithTrailingSlash()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://vizzzion.org/');
        $this->assertEquals('vizzzion.org', $result);
    }

    public function testParseDomainWithoutProtocol()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('vizzzion.org/');
        $this->assertEquals('vizzzion.org', $result);
    }

//    public function testParseDomainWithoutProtocolWithSlash()
//    {
//        $websiteOwner = new Local_Verification_WebsiteOwner();
//        $result = $websiteOwner->parseDomain('//vizzzion.org/');
//        $this->assertEquals('vizzzion.org', $result);
//    }

    public function testParseDomainWithUppercaseLetters()
    {
        $websiteOwner = new Local_Verification_WebsiteOwner();
        $result = $websiteOwner->parseDomain('http://vizZzion.org');
        $this->assertEquals('vizZzion.org', $result);
    }

}
